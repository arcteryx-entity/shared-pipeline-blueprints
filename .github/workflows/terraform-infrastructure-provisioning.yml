name: Terraform Infrastructure Provisioning

on:
  workflow_call:
    inputs:
      workspace:
        description: 'Terraform workspace to deploy (leave empty for all)'
        required: false
        type: string
        default: ''
      action:
        description: 'Action to perform'
        required: false
        type: string
        default: 'plan'
      tf_current_source_dir:
        description: 'Terraform source directory'
        required: false
        type: string
        default: '.'
      variable_root_folder:
        description: 'Root folder containing environment configurations'
        required: false
        type: string
        default: 'environments'
      tf_backend_assume_role_arn:
        description: 'AWS IAM Role ARN for backend access'
        required: false
        type: string
        default: ''
      ignore_assume_role:
        description: 'Skip AWS role assumption'
        required: false
        type: string
        default: 'false'
      runner:
        description: 'GitHub runner to use'
        required: false
        type: string
        default: 'platform-shared-services'
      container_image:
        description: 'Container image to use'
        required: false
        type: string
        default: 'freddieentity/terraform:latest'
    secrets:
      aws_access_key_id:
        description: 'AWS Access Key ID'
        required: false
      aws_secret_access_key:
        description: 'AWS Secret Access Key'
        required: false
      aws_session_token:
        description: 'AWS Session Token'
        required: false
  workflow_dispatch:
    inputs:
      workspace:
        description: 'Terraform workspace to deploy (leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - nonprod
          - dev
          - sit
          - uat
          - preprod
          - prod
      action:
        description: 'Action to perform'
        required: true
        type: choice
        default: 'plan'
        options:
          - validate
          - plan
          - apply

concurrency:
  group: "${{ github.ref }}-${{ github.workflow }}"
  cancel-in-progress: false

env:
  BLUEPRINT_REPO_PATH: "/"
  BLUEPRINT_DEFAULT_BRANCH: main
  MINIMUM_SEVERITY: MEDIUM
  MINIMUM_FAILURE_SEVERITY: warning
  TF_CURRENT_SOURCE_DIR: "${{ inputs.tf_current_source_dir || '.' }}"
  VARIABLE_ROOT_FOLDER: "${{ inputs.variable_root_folder || 'environments' }}"
  TF_BACKEND_ASSUME_ROLE_ARN: "${{ inputs.tf_backend_assume_role_arn || 'arn:aws:iam::621074188511:role/AdminRole' }}"
  IGNORE_ASSUME_ROLE: "${{ inputs.ignore_assume_role || 'false' }}"

jobs:
  Validate:
    name: "Validate (${{ matrix.workspace }})"
    runs-on: "${{ inputs.runner || 'platform-shared-services' }}"
    container:
      image: "${{ inputs.container_image || 'freddieentity/terraform:latest' }}"
    if: |
      (github.event_name == 'workflow_call') ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'validate' || github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'))
    environment:
      name: "${{ matrix.workspace }}"
    timeout-minutes: 60
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ (inputs.workspace != '' && fromJSON(format('["{0}"]', inputs.workspace))) || fromJSON('["nonprod", "prod"]') }}
    env:
      WORKSPACE: "${{ matrix.workspace }}"
      TF_VARIABLE_FILE: "${{ inputs.variable_root_folder || 'environments' }}/${{ matrix.workspace }}/terraform.tfvars"
      TF_BACKEND_FILE: "${{ inputs.variable_root_folder || 'environments' }}/${{ matrix.workspace }}/terraform.backend"
      AWS_ACCESS_KEY_ID: "${{ secrets.aws_access_key_id }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.aws_secret_access_key }}"
      AWS_SESSION_TOKEN: "${{ secrets.aws_session_token }}"
    steps:
      - name: Display Validate Stage
        run: |
          echo "=========================================="
          echo "🔍 Running Validate Stage"
          echo "Workspace: ${{ matrix.workspace }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "=========================================="

      - name: Checkout Repository
        uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true

      # - name: Assume AWS Role
      #   uses: ./.github/actions/assume-role
      #   with:
      #     role-arn: ${{ env.TF_BACKEND_ASSUME_ROLE_ARN }}
      #     ignore-assume-role: ${{ env.IGNORE_ASSUME_ROLE }}

      # - name: Setup Terraform Environment
      #   uses: ./.github/actions/terraform-setup
      #   with:
      #     tf-current-source-dir: ${{ env.TF_CURRENT_SOURCE_DIR }}

      # - name: Initialize Terraform
      #   uses: ./.github/actions/terraform-init
      #   with:
      #     tf-current-source-dir: ${{ env.TF_CURRENT_SOURCE_DIR }}
      #     workspace: ${{ matrix.workspace }}
      #     backend-assume-role-arn: ${{ env.TF_BACKEND_ASSUME_ROLE_ARN }}

      - name: Terraform Format Check
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Running terraform fmt check..."
          # terraform fmt -list=true -write=false -diff=true -check=true -recursive

      - name: Terraform Validate
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Running terraform validate..."
          # terraform validate

      - name: TFLint
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Running tflint..."
          # tflint --var-file=${{ env.TF_VARIABLE_FILE }} \
          #        -f junit \
          #        --minimum-failure-severity=${{ env.MINIMUM_FAILURE_SEVERITY }} \
          #        --no-color > ../tflint-${{ matrix.workspace }}.xml

      - name: Trivy IaC Security Scan
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Running Trivy IaC security scan..."
          # trivy config . \
          #      --tf-vars ${{ env.TF_VARIABLE_FILE }} \
          #      --format json \
          #      --output ../trivy-iac-report-${{ matrix.workspace }}.json \
          #      --severity MEDIUM,HIGH,CRITICAL

      - name: Trivy Summary
        if: always()
        run: |
          echo "Trivy IaC scan summary..."
          # jq -c '.Results[] | select(.Misconfigurations) | .Misconfigurations[] | [.Severity, .Title, .ID]' \
          #   trivy-iac-report-${{ matrix.workspace }}.json | sort || true

      - name: Trivy Critical Check
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Running Trivy critical severity check..."
          # trivy config . \
          #      --tf-vars ${{ env.TF_VARIABLE_FILE }} \
          #      --severity CRITICAL \
          #      --exit-code 1

      # - name: Upload Validation Reports
      #   uses: actions/upload-artifact@v4.1.0
      #   if: always()
      #   with:
      #     name: "validate-reports-${{ matrix.workspace }}"
      #     retention-days: 7
      #     path: |
      #       trivy-iac-report-${{ matrix.workspace }}.json
      #       tflint-${{ matrix.workspace }}.xml

  Plan:
    name: "Plan (${{ matrix.workspace }})"
    needs: Validate
    runs-on: "${{ inputs.runner || 'platform-shared-services' }}"
    container:
      image: "${{ inputs.container_image || 'freddieentity/terraform:latest' }}"
    if: |
      (github.event_name == 'workflow_call') ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'))
    environment:
      name: "${{ matrix.workspace }}"
    timeout-minutes: 60
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ (inputs.workspace != '' && fromJSON(format('["{0}"]', inputs.workspace))) || fromJSON('["nonprod", "prod"]') }}
    env:
      WORKSPACE: "${{ matrix.workspace }}"
      TF_VARIABLE_FILE: "${{ inputs.variable_root_folder || 'environments' }}/${{ matrix.workspace }}/terraform.tfvars"
      TF_BACKEND_FILE: "${{ inputs.variable_root_folder || 'environments' }}/${{ matrix.workspace }}/terraform.backend"
      AWS_ACCESS_KEY_ID: "${{ secrets.aws_access_key_id }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.aws_secret_access_key }}"
      AWS_SESSION_TOKEN: "${{ secrets.aws_session_token }}"
    steps:
      - name: Display Plan Stage
        run: |
          echo "=========================================="
          echo "📋 Running Plan Stage"
          echo "Workspace: ${{ matrix.workspace }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "=========================================="

      - name: Checkout Repository
        uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true

      # - name: Download Validation Artifacts
      #   uses: actions/download-artifact@v4.1.0
      #   with:
      #     name: "validate-reports-${{ matrix.workspace }}"
      #     path: .

      # - name: Assume AWS Role
      #   uses: ./.github/actions/assume-role
      #   with:
      #     role-arn: ${{ env.TF_BACKEND_ASSUME_ROLE_ARN }}
      #     ignore-assume-role: ${{ env.IGNORE_ASSUME_ROLE }}

      # - name: Setup Terraform Environment
      #   uses: ./.github/actions/terraform-setup
      #   with:
      #     tf-current-source-dir: ${{ env.TF_CURRENT_SOURCE_DIR }}

      # - name: Initialize Terraform
      #   uses: ./.github/actions/terraform-init
      #   with:
      #     tf-current-source-dir: ${{ env.TF_CURRENT_SOURCE_DIR }}
      #     workspace: ${{ matrix.workspace }}
      #     backend-assume-role-arn: ${{ env.TF_BACKEND_ASSUME_ROLE_ARN }}

      - name: Terraform Plan
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Running terraform plan..."
          # terraform plan \
          #   -var-file=${{ env.TF_VARIABLE_FILE }} \
          #   -out=tf-${{ matrix.workspace }}.plan \
          #   -input=false

      # - name: Upload Plan Artifact
      #   uses: actions/upload-artifact@v4.1.0
      #   if: success()
      #   with:
      #     name: "terraform-plan-${{ matrix.workspace }}"
      #     retention-days: 7
      #     path: "${{ env.TF_CURRENT_SOURCE_DIR }}/tf-${{ matrix.workspace }}.plan"

  Scan:
    name: "Scan (${{ matrix.workspace }})"
    needs: Plan
    runs-on: "${{ inputs.runner || 'platform-shared-services' }}"
    container:
      image: "${{ inputs.container_image || 'freddieentity/terraform:latest' }}"
    if: |
      (github.event_name == 'workflow_call') ||
      (github.event_name == 'workflow_dispatch' && (github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'))
    environment:
      name: "${{ matrix.workspace }}"
    timeout-minutes: 60
    continue-on-error: true
    strategy:
      fail-fast: false
      matrix:
        workspace: ${{ (inputs.workspace != '' && fromJSON(format('["{0}"]', inputs.workspace))) || fromJSON('["nonprod", "prod"]') }}
    env:
      WORKSPACE: "${{ matrix.workspace }}"
      TF_VARIABLE_FILE: "${{ inputs.variable_root_folder || 'environments' }}/${{ matrix.workspace }}/terraform.tfvars"
      TF_BACKEND_FILE: "${{ inputs.variable_root_folder || 'environments' }}/${{ matrix.workspace }}/terraform.backend"
      AWS_ACCESS_KEY_ID: "${{ secrets.aws_access_key_id }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.aws_secret_access_key }}"
      AWS_SESSION_TOKEN: "${{ secrets.aws_session_token }}"
    steps:
      - name: Display Scan Stage
        run: |
          echo "=========================================="
          echo "🔒 Running Scan Stage (Trivy + OPA)"
          echo "Workspace: ${{ matrix.workspace }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "=========================================="

      - name: Checkout Repository
        uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true

      # - name: Download Plan Artifact
      #   uses: actions/download-artifact@v4.1.0
      #   with:
      #     name: "terraform-plan-${{ matrix.workspace }}"
      #     path: ${{ env.TF_CURRENT_SOURCE_DIR }}

      - name: Convert Plan to JSON
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Converting plan to JSON format..."
          # terraform show -json tf-${{ matrix.workspace }}.plan > tf-${{ matrix.workspace }}-plan.json

      - name: Run OPA Policy Scan
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Running OPA policy scan on terraform plan..."
          # Example OPA scan command:
          # opa eval --data policy/ --input tf-${{ matrix.workspace }}-plan.json \
          #   --format pretty "data.terraform.deny" > ../opa-scan-${{ matrix.workspace }}.json

      - name: Run Trivy Security Scan
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Running Trivy security scan on terraform plan..."
          # Example Trivy scan command:
          # trivy config . \
          #   --format json \
          #   --output ../trivy-scan-${{ matrix.workspace }}.json \
          #   --severity HIGH,CRITICAL

      # - name: Upload Scan Results
      #   uses: actions/upload-artifact@v4.1.0
      #   if: always()
      #   with:
      #     name: "scan-results-${{ matrix.workspace }}"
      #     retention-days: 7
      #     path: |
      #       opa-scan-${{ matrix.workspace }}.json
      #       trivy-scan-${{ matrix.workspace }}.json

  Apply:
    name: "Apply (${{ matrix.workspace }})"
    needs: Scan
    runs-on: "${{ inputs.runner || 'platform-shared-services' }}"
    container:
      image: "${{ inputs.container_image || 'freddieentity/terraform:latest' }}"
    if: |
      (github.event_name == 'workflow_call' && inputs.action == 'apply') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'apply')
    environment:
      name: "${{ matrix.workspace }}"
    timeout-minutes: 60
    strategy:
      fail-fast: false
      max-parallel: 1
      matrix:
        workspace: ${{ (inputs.workspace != '' && fromJSON(format('["{0}"]', inputs.workspace))) || fromJSON('["nonprod", "prod"]') }}
    env:
      WORKSPACE: "${{ matrix.workspace }}"
      TF_VARIABLE_FILE: "${{ inputs.variable_root_folder || 'environments' }}/${{ matrix.workspace }}/terraform.tfvars"
      TF_BACKEND_FILE: "${{ inputs.variable_root_folder || 'environments' }}/${{ matrix.workspace }}/terraform.backend"
      AWS_ACCESS_KEY_ID: "${{ secrets.aws_access_key_id }}"
      AWS_SECRET_ACCESS_KEY: "${{ secrets.aws_secret_access_key }}"
      AWS_SESSION_TOKEN: "${{ secrets.aws_session_token }}"
    steps:
      - name: Display Apply Stage
        run: |
          echo "=========================================="
          echo "🚀 Running Apply Stage"
          echo "Workspace: ${{ matrix.workspace }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "=========================================="

      - name: Checkout Repository
        uses: actions/checkout@v4.1.0
        with:
          fetch-depth: 20
          lfs: true

      # - name: Download Plan Artifact
      #   uses: actions/download-artifact@v4.1.0
      #   with:
      #     name: "terraform-plan-${{ matrix.workspace }}"
      #     path: ${{ env.TF_CURRENT_SOURCE_DIR }}

      # - name: Assume AWS Role
      #   uses: ./.github/actions/assume-role
      #   with:
      #     role-arn: ${{ env.TF_BACKEND_ASSUME_ROLE_ARN }}
      #     ignore-assume-role: ${{ env.IGNORE_ASSUME_ROLE }}

      # - name: Setup Terraform Environment
      #   uses: ./.github/actions/terraform-setup
      #   with:
      #     tf-current-source-dir: ${{ env.TF_CURRENT_SOURCE_DIR }}

      # - name: Initialize Terraform
      #   uses: ./.github/actions/terraform-init
      #   with:
      #     tf-current-source-dir: ${{ env.TF_CURRENT_SOURCE_DIR }}
      #     workspace: ${{ matrix.workspace }}
      #     backend-assume-role-arn: ${{ env.TF_BACKEND_ASSUME_ROLE_ARN }}

      - name: Terraform Apply
        working-directory: ${{ env.TF_CURRENT_SOURCE_DIR }}
        run: |
          echo "Applying terraform plan..."
          # terraform apply -auto-approve tf-${{ matrix.workspace }}.plan

      # - name: Upload Apply Logs
      #   uses: actions/upload-artifact@v4.1.0
      #   if: always()
      #   with:
      #     name: "apply-logs-${{ matrix.workspace }}"
      #     retention-days: 30
      #     path: "${{ env.TF_CURRENT_SOURCE_DIR }}/*.log"
